AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with 2 public + 2 private subnets
# 1 x NAT Gateway (Student adds a second)
# DB Subnet Group across the 2 private subnets
# RDS in Private Subnet

Parameters:

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: String

Resources:

###########
# VPC with Internet Gateway
###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IG

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Private Route Table
###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

###########
# Public Subnets x 2
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

###########
# Private Subnets x 2
###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

###########
# NAT Gateway
###########

  NATGateway:
    DependsOn: PrivateSubnet1
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - NATGatewayEIP
        - AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

###########
# IAM Role for App
###########

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref AppRole]
      InstanceProfileName: Inventory-App-Role

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: '*'

###########
# App Security Group
###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-App
      GroupDescription: Enable access to App
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Inventory-App

###########
# DB Subnet Group
###########

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Lab-DB-Subnet-Group
      DBSubnetGroupName: Lab-DB-Subnet-Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        -
          Key: Name
          Value: DBSubnetGroup

###########
# DB Security Group
###########

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Inventory-DB
      GroupDescription: Enable access to MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: Inventory-DB

###########
# RDS Database
###########

  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: inventory
      DBInstanceIdentifier: inventory-db
      AllocatedStorage: 5
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: lab-password
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        -
          Key: Name
          Value: inventory-db

###########
# Lambda function to clear existing Parameter Store parameters
###########

  LambdaClearParameters:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: clears the parameter store
      FunctionName: Clear-parameter-store
      Role: !Sub ${LambdaVPCRole.Arn}
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import logging
          import threading
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def handler(event, context):
              # Send a failure to CloudFormation if the function timesout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                      / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              
              try:
                  # Loop through regions
                  ec2 = boto3.client('ec2')
                  regions = [region['RegionName'] for region in ec2.describe_regions()['Regions']]              
                  for region in regions:

                      # SSM Client
                      ssm = boto3.client('ssm', region_name=region)

                      # Get all Parameter Store parameters for region
                      get_region_params = ssm.describe_parameters()
                      names = [p['Name'] for p in get_region_params['Parameters']]
                      print(region, names)

                      # Delete them
                      if len(names) > 0:
                          del_region_params = ssm.delete_parameters(Names=names)
                      else:
                          print(('No parameters to delete in region ' + region))

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "Resource creation successful!"}, None)
              except:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": "Problem deleting parameters!"}, None)

          def timeout(event, context):
              logging.error("Execution is about to time out, sending failure response to CloudFormation")
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

      Handler: index.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 300

  CustomClearParameters:
    Type: 'Custom::CustomClearParameters'
    Properties:
      ServiceToken: !Sub ${LambdaClearParameters.Arn}

  LambdaVPCRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SSMCleanup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:*
                  - ec2:Describe*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'


###########
# Web Server 1 - used to create AMI
###########
  WebInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref AppSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: Web Server 1
      UserData:
        Fn::Base64: !Sub |      
          #!/bin/bash
          # Install Apache Web Server and PHP
          yum install -y httpd mysql
          amazon-linux-extras install -y php7.2
          # Download Lab files
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/ILT-TF-200-ACACAD-20-EN/mod9-guided/scripts/inventory-app.zip
          unzip inventory-app.zip -d /var/www/html/
          # Download and install the AWS SDK for PHP
          wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
          unzip aws -d /var/www/html
          # Turn on web server
          chkconfig httpd on
          service httpd start

###########
# awsstudent user & policy for Cloud9 in Vocareum
###########
  IAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: awsstudent

  IAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: IAMUser
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
            "Sid": "Lab",
            "Action": [
              "cloudformation:*",
              "cloud9:*",
              "iam:Get*",
              "iam:List*",
              "logs:List*",
              "logs:Describe*",
              "logs:Get*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents",
              "lambda:*",
              "sns:List*",
              "config:Get*",
              "config:Describe*",
              "config:Deliver*",
              "config:List*",
              "ec2:CreateImage",
              "ec2:CreateSecurityGroup",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RunInstances",
              "ec2:CreateImage",
              "ec2:CreateTags",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:Describe*",
              "ec2:TerminateInstances",
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:DescribeAddress",
              "ec2:CreateNatGateway",
              "ec2:*Route*",
              "ec2:*Subnet*",
              "ec2:*Vpc*",
              "autoscaling:AttachInstances",
              "autoscaling:*AutoScalingGroup",
              "autoscaling:Describe*",
              "autoscaling:DetachInstances",
              "autoscaling:*Tags",
              "autoscaling:*Configuration",
              "autoscaling:*Hook",
              "autoscaling:*Lifecycle*",
              "autoscaling:*LoadBalancer*",
              "autoscaling:*Metrics*",
              "autoscaling:*Policy",
              "autoscaling:*Processes",
              "autoscaling:*Standby",
              "autoscaling:*Scheduled*",
              "autoscaling:SetInstanceHealth",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:SetInstanceProtection",
              "elasticloadbalancing:AddListenerCertificates",
              "elasticloadbalancing:Modify*",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:Set*",
              "elasticloadbalancing:RemoveListenerCertificates",
              "elasticloadbalancing:*LoadBalancer",
              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateRule",
              "elasticloadbalancing:DeleteRule",
              "elasticloadbalancing:*TargetGroup",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:*Tags",
              "elasticloadbalancing:DeleteListener",
              "rds:Delete*",
              "rds:*ParameterGroup",
              "rds:Describe*",
              "rds:*DBSubnetGroup",
              "rds:DownloadDBLogFilePortion",
              "rds:AddRoleToDBCluster",
              "rds:*Snapshot",
              "rds:*SecurityGroup*",
              "rds:CreateEventSubscription",
              "rds:FailoverDBCluster",
              "rds:AddRoleToDBInstance",
              "rds:*Tags*",
              "rds:ModifyEventSubscription",
              "rds:ModifyDBInstance",
              "rds:ApplyPendingMaintenanceAction",
              "rds:BacktrackDBCluster",
              "rds:Remove*",
              "rds:*OptionGroup",
              "rds:AddSourceIdentifierToSubscription",
              "rds:CreateDBClusterEndpoint",
              "rds:StopDBCluster",
              "rds:PromoteReadReplica",
              "rds:StopActivityStream",
              "rds:StartActivityStream",
              "rds:RestoreDBClusterToPointInTime",
              "rds:StopDBInstance",
              "rds:DownloadCompleteDBLogFile",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "ssm:List*",
              "ssm:Describe*",
              "ssm:Get*",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation",
              "ssm:CancelCommand",
              "ssm:SendCommand",
              "ssm:StartAutomationExecution",
              "ssm:StartSession",
              "ssm:TerminateSession",
              "ssm:ResumeSession",
              "ssm:DescribeSessions",
              "ssm:GetConnectionStatus"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "ServiceLinkedRoleAndPolicies",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole",
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "iam:AWSServiceName": [
                              "rds.amazonaws.com",
                              "lambda.amazonaws.com",
                              "ec2.amazonaws.com",
                              "elasticloadbalancing.amazonaws.com",
                              "autoscaling.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "RestrictCloud9",
            "Effect": "Deny",
            "Action": [
                "cloud9:CreateEnvironmentEC2",
                "cloud9:UpdateEnvironment"
            ],
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringNotLikeIfExists": {
                    "cloud9:InstanceType": [
                        "*.nano",
                        "*.micro",
                        "*.small"
                    ]
                }
            }
          }
        ]
      ManagedPolicyName: lab_policy
      Users:
        - awsstudent

  IAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    DependsOn: IAMUser
    Properties:
      Status: Active
      UserName: awsstudent


###########
# Outputs
###########

Outputs:

  Endpoint:
    Value: !GetAtt
      - RDSDatabase
      - Endpoint.Address
    Description: Database endpoint

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Description: PublicSubnet2

  NATGateway1:
    Value: !Ref NATGateway
    Description: NATGateway1

  AccessKey:
    Value:
      Ref: IAMUserAccessKey

  SecretKey:
    Value:
      'Fn::GetAtt':
        - IAMUserAccessKey
        - SecretAccessKey
